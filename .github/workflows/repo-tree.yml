name: Build Repo Tree

on:
  workflow_dispatch:
  push:
    branches: [ main ]

permissions:
  contents: write

jobs:
  tree:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Generate repo_tree.json / repo_tree.md
        run: |
          python3 - <<'PY'
import os, json, pathlib
root = pathlib.Path(".").resolve()
EXCLUDES = {".git", ".venv", "node_modules", "dist", "build", "__pycache__"}
def excluded(p: pathlib.Path): return any(part in EXCLUDES for part in p.parts)
items = []
for p in root.rglob("*"):
    if excluded(p): continue
    kind = "dir" if p.is_dir() else "file"
    items.append({"path": str(p.relative_to(root)), "type": kind,
                  "size": (p.stat().st_size if p.is_file() else None)})
items.sort(key=lambda x: (x["type"]!="dir", x["path"].lower()))
pathlib.Path("repo_tree.json").write_text(
    json.dumps(items, ensure_ascii=False, indent=2), encoding="utf-8")
def indent(path: str): import os; return "  " * path.count(os.sep)
lines = ["# Repository Tree\n"]
for it in items:
    p = it["path"]
    if not p: continue
    if it["type"] == "dir":
        lines.append(f"{indent(p)}- 📁 {p}")
    else:
        kb = f" ({it['size']/1024:.1f} KB)" if it["size"] is not None else ""
        lines.append(f"{indent(p)}- 📄 {p}{kb}")
pathlib.Path("repo_tree.md").write_text("\n".join(lines) + "\n", encoding="utf-8")
print("generated repo_tree.json / repo_tree.md")
PY

      - name: Commit tree files
        run: |
          git config user.name "repo-bot"
          git config user.email "actions@users.noreply.github.com"
          git add repo_tree.json repo_tree.md
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "chore: update repo tree"
            git push
          fi
name: Build Repo Tree

on:
  workflow_dispatch:
  push:
    branches: [ main ]

permissions:
  contents: write

jobs:
  tree:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Generate repo_tree.json / repo_tree.md
        run: |
          python3 - <<'PY'
import os, json, pathlib
root = pathlib.Path(".").resolve()
EXCLUDES = {".git", ".venv", "node_modules", "dist", "build", "__pycache__"}
def excluded(p: pathlib.Path): return any(part in EXCLUDES for part in p.parts)
items = []
for p in root.rglob("*"):
    if excluded(p): continue
    kind = "dir" if p.is_dir() else "file"
    items.append({"path": str(p.relative_to(root)), "type": kind,
                  "size": (p.stat().st_size if p.is_file() else None)})
items.sort(key=lambda x: (x["type"]!="dir", x["path"].lower()))
pathlib.Path("repo_tree.json").write_text(
    json.dumps(items, ensure_ascii=False, indent=2), encoding="utf-8")
def indent(path: str): import os; return "  " * path.count(os.sep)
lines = ["# Repository Tree\n"]
for it in items:
    p = it["path"]
    if not p: continue
    if it["type"] == "dir":
        lines.append(f"{indent(p)}- 📁 {p}")
    else:
        kb = f" ({it['size']/1024:.1f} KB)" if it["size"] is not None else ""
        lines.append(f"{indent(p)}- 📄 {p}{kb}")
pathlib.Path("repo_tree.md").write_text("\n".join(lines) + "\n", encoding="utf-8")
print("generated repo_tree.json / repo_tree.md")
PY

      - name: Commit tree files
        run: |
          git config user.name "repo-bot"
          git config user.email "actions@users.noreply.github.com"
          git add repo_tree.json repo_tree.md
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "chore: update repo tree"
            git push
          fi
name: Build Repo Tree

on:
  workflow_dispatch:
  push:
    branches: [ main ]

permissions:
  contents: write

jobs:
  tree:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Generate repo_tree.json / repo_tree.md
        run: |
          python3 - <<'PY'
import os, json, pathlib
root = pathlib.Path(".").resolve()

EXCLUDES = {".git", ".venv", "node_modules", "dist", "build", "__pycache__"}

def excluded(p: pathlib.Path):
    return any(part in EXCLUDES for part in p.parts)

items = []
for p in root.rglob("*"):
    if excluded(p):
        continue
    kind = "dir" if p.is_dir() else "file"
    items.append({
        "path": str(p.relative_to(root)),
        "type": kind,
        "size": (p.stat().st_size if p.is_file() else None)
    })

items.sort(key=lambda x: (x["type"]!="dir", x["path"].lower()))

pathlib.Path("repo_tree.json").write_text(
    json.dumps(items, ensure_ascii=False, indent=2),
    encoding="utf-8"
)

def indent(path: str):
    import os
    return "  " * path.count(os.sep)

lines = ["# Repository Tree\n"]
for it in items:
    p = it["path"]
    if not p:
        continue
    if it["type"] == "dir":
        lines.append(f"{indent(p)}- 📁 {p}")
    else:
        kb = f" ({it['size']/1024:.1f} KB)" if it["size"] is not None else ""
        lines.append(f"{indent(p)}- 📄 {p}{kb}")

pathlib.Path("repo_tree.md").write_text("\n".join(lines) + "\n", encoding="utf-8")
print("generated repo_tree.json / repo_tree.md")
PY

      - name: Commit tree files
        run: |
          git config user.name "repo-bot"
          git config user.email "actions@users.noreply.github.com"
          git add repo_tree.json repo_tree.md
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "chore: update repo tree"
            git push
          fi
name: Build Repo Tree (diag)

on:
  workflow_dispatch:

jobs:
  ok:
    runs-on: ubuntu-latest
    steps:
      - run: echo "repo-tree minimal OK"


